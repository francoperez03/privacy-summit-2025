{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"5449922146847941731","abi":{"parameters":[{"name":"app_id","type":{"kind":"field"},"visibility":"public"},{"name":"group_id","type":{"kind":"field"},"visibility":"public"},{"name":"version","type":{"kind":"field"},"visibility":"public"},{"name":"root","type":{"kind":"field"},"visibility":"public"},{"name":"app_silo","type":{"kind":"field"},"visibility":"public"},{"name":"epoch_id","type":{"kind":"field"},"visibility":"public"},{"name":"request_id","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier","type":{"kind":"field"},"visibility":"public"},{"name":"account_id","type":{"kind":"field"},"visibility":"private"},{"name":"attr","type":{"kind":"field"},"visibility":"private"},{"name":"nsk","type":{"kind":"field"},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"path","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"pVftbuowDH2X/uZHbOfD4VWupqlj3YRUFdTBpKuJd78OcXphUqOq/dODKT4+cXIS8tO8d2/Xz9fj8HH6avZ/fpq38dj3x8/X/nRoL8fTIN/+NCY9wDd73DUQMnCzJ4HY7O2uQfmFvd12TUl7vYxdl7IeeIT93I7dcGn2w7Xvd81321/vP/o6t8MdL+0ob82u6YZ3QSH8OPZd+nTb/c8286lsUJMZ/ZQO4Skf5vO9tZrvHa3JZyj5zKvyy+CDma1fGT9wJCWAiDAxuMUdRANRGdAEmmPw8ww2ljE4b+byQ0UBMhcF9DiL8YmBKwyMZRqRHcwxxMoYwJQuWHC4hgGpLAWLPq5iQLeVAcIChkonCWwZBUGEzQx2jqG2IsH6Mpvw4KpfKwoqSzLEsi2EGNcQ8GQKtrSVYNUQIpWpjA/r8RcB1reGqYuztkTY7EvEzcZE2uzMKsUya9YpFnmzTrHInNV2xqkXGGEVBYExkz2B1lEs2iOWU8xuElWDYRkHE6859+TgK72UbWYNAwFO/vCz2wzZikfRlTUBhLMbDbnNLiW/2aUUNru0SrHMpXWKRS6tUyxyaa2dC/2xnGLVIUo8LU5rng+QF4naw3F8/tMP8lL+2d+fdH/a+9NJWSnk0xLdNSFHnKOYIzA5BNAYNSaNrcaJS5ZauloA57vFHVkxZkzXi3R+IiiiIqXRCAofyjShU/SKQd+zxsJHUp+Ej6QdBIqoSIo21yWnqPpI9RHn+hQzWtVnIdezmOtZUlR91ul71WdD1mM517Uxo1N9TvU5zHUdKao+p/qcz/VdUFR9LuZ63uR6HhRVn9f+edXnXdbjfa7rg6Lq86ovmFw3gKLqC6ov2Fw/OEXVF3Q+gs5HiBlZ9bH2j1UfU9bDwkeyXjjpE372aVsRDBqzxjHH0eQ4gsaoMWlsNXbJ1YKJL7nqux2P7VvfJQMki1yHQ/GDhJe/5/KmXJPP4+nQvV/HLnnn4a4szz8yEowvt+Svfw==","file_map":{"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"50":{"source":"use dep::std::hash::pedersen_hash;\n\nglobal DEPTH: u32 = 4;\n\n// ---- Helpers ---------------------------------------------------------------\n\nfn hash_pair(l: Field, r: Field) -> Field {\n    pedersen_hash([l, r])\n}\n\n/// Structured, domain-separated leaf:\n/// leaf = H(TAG_LEAF, app_id, group_id, account_id, attr, version)\nfn make_leaf(\n    app_id: Field,\n    group_id: Field,\n    account_id: Field,\n    attr: Field,\n    version: Field,\n) -> Field {\n    let TAG_LEAF: Field = 1 as Field;\n    pedersen_hash([TAG_LEAF, app_id, group_id, account_id, attr, version])\n}\n\n/// Compute Merkle root from leaf + path using index-derived directions.\nfn compute_root_from_index(leaf: Field, index: u32, path: [Field; DEPTH]) -> Field {\n    let mut digest = leaf;\n\n    for i in 0..DEPTH {\n        let sib = path[i];\n        let dir = (index >> (i as u8)) & 1 == 1;\n        let (l, r) = if dir { (sib, digest) } else { (digest, sib) };\n        digest = hash_pair(l, r);\n    }\n\n    digest\n}\n\n\n/// Consume-once nullifier (Aztec style):\n/// nullifier = H(TAG_NF, nsk, leaf, app_silo, epoch_id, request_id)\nfn calc_nullifier(\n    nsk: Field,\n    leaf: Field,\n    app_silo: Field,\n    epoch_id: Field,\n    request_id: Field,\n) -> Field {\n    let TAG_NF: Field = 2 as Field;\n    pedersen_hash([TAG_NF, nsk, leaf, app_silo, epoch_id, request_id])\n}\n\n// ---- Main circuit ----------------------------------------------------------\n\nfn main(\n    // Publics (binding + freshness + consume-once)\n    app_id: pub Field,\n    group_id: pub Field,\n    version: pub Field,\n    root: pub Field,\n    app_silo: pub Field,\n    epoch_id: pub Field,\n    request_id: pub Field,\n    nullifier: pub Field,\n\n    // Privates\n    account_id: Field,\n    attr: Field,\n    nsk: Field,\n    index: u32,\n    path: [Field; DEPTH],\n) {\n    // Hardening: optional bound on index (avoid out-of-range)\n    // 1 << DEPTH = 16 for DEPTH=4\n    assert(index < (1 << (DEPTH as u8)));\n\n    // 1) Structured leaf with domain separation (binds to user + app context)\n    let leaf = make_leaf(app_id, group_id, account_id, attr, version);\n\n    // 2) Merkle inclusion against committed root\n    let calc_root = compute_root_from_index(leaf, index, path);\n    assert(calc_root == root);\n\n    // 3) Consume-once: public nullifier (verifier must track seen set)\n    let nf_calc = calc_nullifier(nsk, leaf, app_silo, epoch_id, request_id);\n    assert(nf_calc == nullifier);\n}\n\nfn fake_path() -> [Field; DEPTH] {\n    [11, 22, 33, 44]\n}\n\nfn build_publics_and_proof() -> (\n    // publics\n    Field, Field, Field, Field, Field, Field, Field, Field,\n    // privates\n    Field, Field, Field, u32, [Field; DEPTH],\n) {\n    // Context / bindings\n    let app_id = 1001;\n    let group_id = 2002;\n    let version = 1;\n\n    // Freshness / domain / request\n    let app_silo = 3003;\n    let epoch_id = 4444;\n    let request_id = 5555;\n\n    // User data\n    let account_id = 7777;\n    let attr = 8888;   // e.g. some attribute\n    let nsk = 424242;\n\n    // Membership proof\n    let index: u32 = 6; // binary 0110 -> dir pattern: [0,1,1,0]\n    let path = fake_path();\n\n    // Build leaf and root deterministically for this test\n    let leaf = make_leaf(app_id, group_id, account_id, attr, version);\n    let root = compute_root_from_index(leaf, index, path);\n\n    // Consume-once\n    let nullifier = calc_nullifier(nsk, leaf, app_silo, epoch_id, request_id);\n\n    (\n        // publics\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        // privates\n        account_id, attr, nsk, index, path\n    )\n}\n\n// Tests ------------------------------------------------------------------\n\n#[test]\nfn test_valid_membership_and_nullifier() {\n    let (\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, index, path\n    ) = build_publics_and_proof();\n\n    // Should pass\n    main(\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, index, path\n    );\n}\n\n#[test(should_fail)]\nfn test_fails_with_wrong_root() {\n    let (\n        app_id, group_id, version, mut root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, index, path\n    ) = build_publics_and_proof();\n\n    root += 1; // stale/incorrect root\n\n    main(\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, index, path\n    );\n}\n\n#[test(should_fail)]\nfn test_fails_with_wrong_index_direction() {\n    let (\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, mut index, path\n    ) = build_publics_and_proof();\n\n    // Flip one bit of the index traversal changes -> root mismatch\n    index ^= 1; // toggle LSB\n\n    main(\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, index, path\n    );\n}\n\n#[test(should_fail)]\nfn test_fails_with_tampered_leaf_binding() {\n    let (\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        mut account_id, attr, nsk, index, path\n    ) = build_publics_and_proof();\n\n    // Change account_id -> leaf changes -> root mismatch\n    account_id += 1;\n\n    main(\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, index, path\n    );\n}\n\n#[test(should_fail)]\nfn test_fails_with_wrong_nullifier() {\n    let (\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, mut nullifier,\n        account_id, attr, nsk, index, path\n    ) = build_publics_and_proof();\n\n    // Break the consume-once property by altering the public nullifier\n    nullifier += 1;\n\n    main(\n        app_id, group_id, version, root, app_silo, epoch_id, request_id, nullifier,\n        account_id, attr, nsk, index, path\n    );\n}\n","path":"/Users/francoperez/repos/wakeup/privacy-summit-2025/circuits/stage_2_after/src/main.nr"}},"names":["main"],"brillig_names":["decompose_hint","directive_integer_quotient","directive_invert"]}