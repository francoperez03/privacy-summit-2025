{"noir_version":"1.0.0-beta.9+6abff2f16e1c1314ba30708d1cf032a536de3d19","hash":"6492744457129743215","abi":{"parameters":[{"name":"cutoff","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"app_silo","type":{"kind":"field"},"visibility":"public"},{"name":"request_id","type":{"kind":"field"},"visibility":"public"},{"name":"nullifier","type":{"kind":"field"},"visibility":"public"},{"name":"dob_commitment","type":{"kind":"field"},"visibility":"public"},{"name":"dob","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"nsk","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9VWS3KDMAwFQhI+JR9oS5Y5gs0nmF2vUqbk/ifo1C5yRlUpCxCLakYjRSaap/eMjesMdtF+hNzVvoFo7EpqW6hhs8++QSzFrar6puhlKd9F0XaqFlXd3ZRUslb1R6HKsleVatqubUQrq7KX97ot72KwPeolFtqaOIP5OCUtGGypdh9hNVx/Qr7/Iw8gt/8LtUfaY+1PqG7NY+bA59NKhv9E92Q+zooWxnTfIX19lLsoT4juB2d4h0/az85v3TeEA7HMpMfY68CoTcqHa1SbFGlwRPkJ5WeiTab9WfuL9ldn/Xdyw6hNxsinT+ad4kAsM8nJ53Y5rsd5PzI6W2/Maw7R3O0/LnBTuBIAPg+QB6C1yJ/Zq4BeMmfEdVlpU3BfVjmjri7aK3azGX12EPEMHuw5etjhGQOIIcQIrTMeYoXtH6/T//uDlVqE8pisWe6muKG/PRKnnqV1XEtG1mzPDCLGa+f4AqPIyrMtDAAA","debug_symbols":"pVbbjoMgEP0Xnn1gBrn1Vzabxra0MSFqqG6yafrvi1VsTRZi5OkU6DnOnBkmPMjFnIbbsW6u7Z0cvh7k5Gpr69vRtueqr9vG7z6eBQnLY++M8Vvk49yzusqZpieHZrC2ID+VHV5/undV88K+cv6UFsQ0F49e8FpbM/56Fm82jVOVDmRN+ULnaz7E+ZrNdNhFlyLQgcboLE5nHGd+CeLNlyt+GeejUCF9FJrFFHhcARjVIQWGKqYgEg6WPFSAR/kpD7RaPOB7PJAQioCS0ZiCTngg5dIFUmNMARJtCBRxaSTB9wSh34XQGA0iEYMGtRQCYs2YzEHxpZvL+G1I1QIhlEKVUQGeeSFApCJQwUZkNF5LmfABxFJLUHyXxLZbBTrzWqUENrZk0sxt42X8TqYTyDKd2Cgg9/mwbcSgyJ4xKHN9kNkdkUwje0oBcPXv7do+p7AMUwaQr8fMt19V59qtnikEx28VhE1QTsDHjiyI8An7lZxAefAJ6gmA+onkdwE8eusAZ2QzliM+x1BdXZ2smR9F16E5f7yR+t8unIRXVOfas7kMzoyBvs586H8=","file_map":{"50":{"source":"use poseidon::poseidon2::Poseidon2;\n\nfn commit_dob(dob: u32) -> Field {\n    Poseidon2::hash([dob as Field], 1)\n}\n\nfn compute_nullifier(nsk: Field, dob_commitment: Field, app_silo: Field, request_id: Field) -> Field {\n    Poseidon2::hash([nsk, dob_commitment, app_silo, request_id], 4)\n}\n\n\nfn main(\n    cutoff: pub u32,              // today - 18y, computed by verifier\n    app_silo: pub Field,          // Domain ID\n    request_id: pub Field,        // Per-request identifier (for uniqueness)\n    nullifier: pub Field,         // Must be unique per (app_silo, request_id)\n    dob_commitment: pub Field,    // Pre-committed DOB for this account\n    dob: u32,                     // Date of birth\n    nsk: Field                    // Nullifier secret key (app-siloed)\n) {\n    //Antifarming at provetime: The DOB used in the proof must equal the pre-committed value.\n    let dob_commit_calc = commit_dob(dob);\n    assert(dob_commit_calc == dob_commitment);\n\n    // Anti-replay / uniqueness in this context:\n    // Nullifier derived from an app-siloed secret key.\n    let nullifier_calc = compute_nullifier(nsk, dob_commitment, app_silo, request_id);\n    assert(nullifier_calc == nullifier);\n\n    // Business rule: at least 18 years.\n    assert(dob <= cutoff);\n\n}\n\n#[test]\nfn test_valid_proof() {\n    let dob = 10_000;\n    let cutoff = 10_000 + 6570; // exactly 18 years later\n\n    let dob_commitment = commit_dob(dob);\n    let nsk = 42;\n    let app_silo = 12345;\n    let request_id = 777;\n\n    let nullifier = compute_nullifier(nsk, dob_commitment, app_silo, request_id);\n\n    main(cutoff, app_silo, request_id, nullifier, dob_commitment, dob, nsk);\n}\n\n#[test(should_fail)]\nfn test_fails_if_underage() {\n    let dob = 20_000;\n    let cutoff = 25_000; // only 5 years later -> fails\n\n    let dob_commitment = commit_dob(dob);\n    let nsk = 42;\n    let app_silo = 12345;\n    let request_id = 777;\n\n    let nullifier = compute_nullifier(nsk, dob_commitment, app_silo, request_id);\n\n    main(cutoff, app_silo, request_id, nullifier, dob_commitment, dob, nsk);\n}\n\n#[test(should_fail)]\nfn test_fails_if_dob_commitment_tampered() {\n    let dob = 10_000;\n    let cutoff = 20_000;\n\n    let wrong_dob_commitment = commit_dob(9999); // wrong dob\n    let nsk = 42;\n    let app_silo = 12345;\n    let request_id = 777;\n\n    let nullifier = compute_nullifier(nsk, wrong_dob_commitment, app_silo, request_id);\n\n    main(cutoff, app_silo, request_id, nullifier, wrong_dob_commitment, dob, nsk);\n}\n\n#[test(should_fail)]\nfn test_fails_if_nullifier_wrong() {\n    let dob = 10_000;\n    let cutoff = 20_000;\n\n    let dob_commitment = commit_dob(dob);\n    let nsk = 42;\n    let app_silo = 12345;\n    let request_id = 777;\n\n    let wrong_nullifier = 0;\n\n    main(cutoff, app_silo, request_id, wrong_nullifier, dob_commitment, dob, nsk);\n}\n","path":"/Users/francoperez/repos/wakeup/privacy-summit-2025/circuits/stage_1_after/src/main.nr"},"57":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/francoperez/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient"]}